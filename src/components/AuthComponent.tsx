import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { useAuth } from '@/hooks/useAuth'\nimport { Loader2, Mail, Lock, User, Building, IdCard, AlertTriangle } from 'lucide-react'\n\ninterface AuthComponentProps {\n  onClose?: () => void\n}\n\nexport function AuthComponent({ onClose }: AuthComponentProps) {\n  const { signIn, signUp, resetPassword, loading } = useAuth()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [message, setMessage] = useState<string | null>(null)\n  const [activeTab, setActiveTab] = useState('signin')\n\n  // Sign In Form\n  const [signInData, setSignInData] = useState({\n    email: '',\n    password: ''\n  })\n\n  // Sign Up Form\n  const [signUpData, setSignUpData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    fullName: '',\n    medicalLicense: '',\n    organization: ''\n  })\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!signInData.email || !signInData.password) {\n      setError('Please fill in all required fields')\n      return\n    }\n\n    try {\n      setIsLoading(true)\n      setError(null)\n      await signIn(signInData.email, signInData.password)\n      setMessage('Sign in successful!')\n      onClose?.()\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Sign in failed')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!signUpData.email || !signUpData.password || !signUpData.fullName) {\n      setError('Please fill in all required fields')\n      return\n    }\n\n    if (signUpData.password !== signUpData.confirmPassword) {\n      setError('Passwords do not match')\n      return\n    }\n\n    if (signUpData.password.length < 6) {\n      setError('Password must be at least 6 characters')\n      return\n    }\n\n    try {\n      setIsLoading(true)\n      setError(null)\n      await signUp(signUpData.email, signUpData.password, {\n        fullName: signUpData.fullName,\n        medicalLicense: signUpData.medicalLicense,\n        organization: signUpData.organization\n      })\n      setMessage('Account created! Please check your email to verify your account.')\n      setActiveTab('signin')\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Sign up failed')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleResetPassword = async () => {\n    if (!signInData.email) {\n      setError('Please enter your email address first')\n      return\n    }\n\n    try {\n      setIsLoading(true)\n      setError(null)\n      await resetPassword(signInData.email)\n      setMessage('Password reset email sent! Check your inbox.')\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Password reset failed')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2\">\n            <div className=\"p-2 bg-primary/10 rounded-full\">\n              <User className=\"h-5 w-5 text-primary\" />\n            </div>\n            Medical Assistant Account\n          </CardTitle>\n          <CardDescription>\n            Sign in to save your medical consultations and access them across devices\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"signin\" className=\"space-y-4 mt-4\">\n              <form onSubmit={handleSignIn} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-email\">Email</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"signin-email\"\n                      type=\"email\"\n                      placeholder=\"doctor@example.com\"\n                      value={signInData.email}\n                      onChange={(e) => setSignInData(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-password\">Password</Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"signin-password\"\n                      type=\"password\"\n                      value={signInData.password}\n                      onChange={(e) => setSignInData(prev => ({ ...prev, password: e.target.value }))}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Sign In\n                </Button>\n\n                <Button \n                  type=\"button\" \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={handleResetPassword}\n                  disabled={isLoading}\n                  className=\"w-full\"\n                >\n                  Forgot Password?\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"signup\" className=\"space-y-4 mt-4\">\n              <form onSubmit={handleSignUp} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-name\">Full Name *</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"signup-name\"\n                      type=\"text\"\n                      placeholder=\"Dr. Jane Smith\"\n                      value={signUpData.fullName}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, fullName: e.target.value }))}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email *</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"signup-email\"\n                      type=\"email\"\n                      placeholder=\"doctor@example.com\"\n                      value={signUpData.email}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, email: e.target.value }))}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-password\">Password *</Label>\n                    <Input\n                      id=\"signup-password\"\n                      type=\"password\"\n                      value={signUpData.password}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, password: e.target.value }))}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-confirm\">Confirm *</Label>\n                    <Input\n                      id=\"signup-confirm\"\n                      type=\"password\"\n                      value={signUpData.confirmPassword}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-license\">Medical License (Optional)</Label>\n                  <div className=\"relative\">\n                    <IdCard className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"signup-license\"\n                      type=\"text\"\n                      placeholder=\"MD12345\"\n                      value={signUpData.medicalLicense}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, medicalLicense: e.target.value }))}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-org\">Organization (Optional)</Label>\n                  <div className=\"relative\">\n                    <Building className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"signup-org\"\n                      type=\"text\"\n                      placeholder=\"General Hospital\"\n                      value={signUpData.organization}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, organization: e.target.value }))}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Create Account\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          {error && (\n            <Alert className=\"mt-4 border-destructive bg-destructive/5\">\n              <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n              <AlertDescription className=\"text-destructive\">\n                {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {message && (\n            <Alert className=\"mt-4 border-green-500 bg-green-50\">\n              <AlertDescription className=\"text-green-700\">\n                {message}\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n\n        <CardFooter>\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-xs\">\n              <strong>Privacy Notice:</strong> Your conversations are stored securely and are only accessible to you. \n              We comply with medical privacy standards and never share your data.\n            </AlertDescription>\n          </Alert>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n}